// Protocol buffers definition for Silo server

syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;

import "google/protobuf/timestamp.proto";

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
}

message InitRequest {
}

message InitResponse {
}

message ClearRequest {
}

message ClearResponse {
}

enum ObservationType {
    UNKNOWN = 0;
    PERSON = 1;
    CAR = 2;
};

message ReportRequest {  
    message ReportItem {
        ObservationType type = 1;
        string id = 2;
    }
    string cameraName = 1;
    google.protobuf.Timestamp timestamp = 2;
    repeated ReportItem reports = 3;
}

message ReportResponse {
    message FailureItem {
        ObservationType type = 1;
        string id = 2;
        string message = 3;
    }
    repeated FailureItem failures = 1;
    repeated int32 ts = 2;
}

message TrackRequest {
    ObservationType type = 1;
    string id = 2;    
}

message TrackResponse {
    ObservationType type = 1;
    string id = 2;
    google.protobuf.Timestamp timestamp = 3;
    string name = 4;
    double latitude = 5;
    double longitude = 6;
    repeated int32 ts = 7;
}

message TrackMatchRequest {
    ObservationType type = 1;
    string id = 2;    
}

message TrackMatchResponse {
    repeated TrackResponse observation = 1;
    repeated int32 ts = 2;
}

message TraceRequest {
    ObservationType type = 1;
    string id = 2;    
}

message TraceResponse {
    repeated TrackResponse observation = 1;
    repeated int32 ts = 2;
}

message CameraRegistrationRequest {    
    string name = 1;
    double latitude = 2; // assure precision to 6 decimal cases (float barely reaches 5 at 128-256 range)
    double longitude = 3;   
}

message CameraRegistrationResponse {
    repeated int32 ts = 1;
}

message CameraInfoRequest {
    string name = 1; 
    
}

message CameraInfoResponse {
    double latitude = 1;
    double longitude = 2;
    repeated int32 ts = 3;
}

// server to server messages (gossip protocol)

message GossipRequest {
    repeated CameraRegistrationRequest cameras = 1;
    repeated ReportRequest reports = 2;
    repeated int32 ts = 3;
}

message GossipResponse {    
}

// service
service Sauron {
    rpc ctrlPing(PingRequest) returns (PingResponse);
    rpc ctrlClear(ClearRequest) returns (ClearResponse);
    rpc ctrlInit(InitRequest) returns (InitResponse);
    rpc camJoin(CameraRegistrationRequest) returns (CameraRegistrationResponse);
    rpc camInfo(CameraInfoRequest) returns (CameraInfoResponse);
    rpc track(TrackRequest) returns (TrackResponse);
    rpc trace(TraceRequest) returns (TraceResponse);
    rpc trackMatch(TrackMatchRequest) returns (TrackMatchResponse);
    rpc report(ReportRequest) returns (ReportResponse);    
}

service Gossip {
    rpc gossipData(GossipRequest) returns (GossipResponse);    
}
